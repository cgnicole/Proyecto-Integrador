{"ast":null,"code":"const validation = (userData, errors, setErrors) => {\n  // validacion username\n\n  if (!userData.username) setErrors({\n    ...errors,\n    username: \"Ingresa un email válido\"\n  });else if (userData.username.length > 35) setErrors({\n    ...errors,\n    username: \"No puede superar los 35 caracteres\"\n  });else if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(userData.username)) {\n    setErrors({\n      ...errors,\n      username: \"Email invalido\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      username: \"\"\n    });\n  }\n\n  //validacion password\n\n  //  esta expresión regular se utiliza para validar una contraseña que contenga al menos un dígito, una letra mayúscula, una letra minúscula y tenga una longitud mínima de 8 caracteres.\n  if (userData.password.length < 6 || userData.password.length > 10) {\n    setErrors({\n      ...errors,\n      password: \"Longitud de password invalida\"\n    });\n  } else if (!/\\d/.test(userData.password)) {\n    setErrors({\n      ...errors,\n      password: \"Debe contener al menos un número\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      password: \"\"\n    });\n  }\n};\nexport default validation;","map":{"version":3,"names":["validation","userData","errors","setErrors","username","length","test","password"],"sources":["/Users/nicolesofiacamargogarcia/Documents/Rick_And_Morty/rick_and_morty/src/components/validation.js"],"sourcesContent":["const validation = (userData, errors, setErrors) => {\n  // validacion username\n\n  if (!userData.username)\n    setErrors({ ...errors, username: \"Ingresa un email válido\" });\n  else if (userData.username.length > 35)\n    setErrors({ ...errors, username: \"No puede superar los 35 caracteres\" });\n  else if (\n    !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(userData.username)\n  ) {\n    setErrors({ ...errors, username: \"Email invalido\" });\n  } else {\n    setErrors({ ...errors, username: \"\" });\n  }\n\n  //validacion password\n\n  //  esta expresión regular se utiliza para validar una contraseña que contenga al menos un dígito, una letra mayúscula, una letra minúscula y tenga una longitud mínima de 8 caracteres.\n  if (userData.password.length < 6 || userData.password.length > 10) {\n    setErrors({ ...errors, password: \"Longitud de password invalida\" });\n  } else if (!/\\d/.test(userData.password)) {\n    setErrors({ ...errors, password: \"Debe contener al menos un número\" });\n  } else {\n    setErrors({ ...errors, password: \"\" });\n  }\n};\n\nexport default validation;\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,KAAK;EAClD;;EAEA,IAAI,CAACF,QAAQ,CAACG,QAAQ,EACpBD,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,QAAQ,EAAE;EAA0B,CAAC,CAAC,CAAC,KAC3D,IAAIH,QAAQ,CAACG,QAAQ,CAACC,MAAM,GAAG,EAAE,EACpCF,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,QAAQ,EAAE;EAAqC,CAAC,CAAC,CAAC,KACtE,IACH,CAAC,6CAA6C,CAACE,IAAI,CAACL,QAAQ,CAACG,QAAQ,CAAC,EACtE;IACAD,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEE,QAAQ,EAAE;IAAiB,CAAC,CAAC;EACtD,CAAC,MAAM;IACLD,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEE,QAAQ,EAAE;IAAG,CAAC,CAAC;EACxC;;EAEA;;EAEA;EACA,IAAIH,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,EAAE,EAAE;IACjEF,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAgC,CAAC,CAAC;EACrE,CAAC,MAAM,IAAI,CAAC,IAAI,CAACD,IAAI,CAACL,QAAQ,CAACM,QAAQ,CAAC,EAAE;IACxCJ,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAmC,CAAC,CAAC;EACxE,CAAC,MAAM;IACLJ,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAG,CAAC,CAAC;EACxC;AACF,CAAC;AAED,eAAeP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}